import numpy as np
import spacy
import pickle
import sys
import glob
from tqdm import tqdm
import os
import esupar

os.environ['CUDA_VISIBLE_DEVICES'] = ""
nlp = esupar.load("ja")

"""
NOTE for speed-up, this should be run parallelized using
GNU parallel. we provide an example incantation that we used:

cat chunks_sent | parallel --sshloginfile ../Rules2UD/nodeslist_new --jobs 2 "./run_sents.sh"

where `chunks_sent` is a file generated by prep_annotate.py
"""

assert len(sys.argv) == 2
print(sys.argv)
begin_chunk, end_chunk = sys.argv[1].split(" ")
begin_chunk = int(begin_chunk)
end_chunk = int(end_chunk)

print((begin_chunk, end_chunk))

with open("chunks_q2r_all_esupar/sent_unq_index.pkl", "rb") as f:
    sent_unq_index = pickle.load(f)

sent_unq_chunk = []
with open("chunks_q2r_all_esupar/sent_unq.txt", "r") as f:
    f.seek(sent_unq_index[begin_chunk])
    i = begin_chunk
    while i <= end_chunk:
        line = f.readline()
        sent_unq_chunk.append(line)
        i += 1

sent_unq_chunk = [s.strip() for s in sent_unq_chunk]
assert len(sent_unq_chunk) == (end_chunk - begin_chunk + 1)

#### for ginza
# sent_s = "\n".join([s for s in sent_unq_chunk])
# print("call ginza...")
# with open(f"tmp_{begin_chunk}_{end_chunk}", "w") as f:
#     f.write(sent_s)
# outs_s = os.popen(f"ginza -d < tmp_{begin_chunk}_{end_chunk}").read()
# os.remove(f"tmp_{begin_chunk}_{end_chunk}")
# assert outs_s is not None and len(outs_s) > 0
#### for ginza

# try:
#     outs_s = os.popen(f"echo '{sent_s}' | ginza -d").read()
# except:
#     # piped string is too long
#     with open(f"tmp_{begin_chunk}_{end_chunk}", "w") as f:
#         f.write(sent_s)
#     outs_s = os.popen(f"ginza -d < tmp_{begin_chunk}_{end_chunk}").read()
#     os.remove(f"tmp_{begin_chunk}_{end_chunk}")

# sent_fn_o = f"chunks_q2r_all/q2r_{begin_chunk}_{end_chunk}.conllu"
# ret = os.system(
#     f'python ../Rules2UD/modify_conllu.py {sent_fn} False "ginza" "chunks_q2r_all" False > /dev/null')
# assert ret == 0

# with open(sent_fn_o, "r") as f:
#     outs_s = f.read()

#### for ginza
# sent_to_form = {}
# for out in outs_s.split("\n\n")[:-1]:
#     out = out.split("\n")
#     for i in range(len(out)):
#         if "\t" in out[i]:
#             out[i] = out[i].split("\t")

#     assert out[0].startswith("# text =")
#     header = out[0].split('# text =')[-1].strip()
#     if header not in sent_to_form:
#         sent_to_form[header] = [form[1] for form in out[1:]]
#### for ginza

sent_to_form = {}
print("call esupar...")
for sent in sent_unq_chunk:
    if sent not in sent_to_form:
        annotation = nlp(sent).values
        sent_to_form[sent] = (annotation[1], annotation[3], annotation[7])

os.makedirs("chunk_s2f_esupar", exist_ok=True)
with open(f"chunk_s2f_esupar/s2f_{begin_chunk}_{end_chunk}.pkl", "wb") as f:
    pickle.dump(sent_to_form, f)
